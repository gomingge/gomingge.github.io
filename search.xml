<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F04%2F11%2F%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[终于解决hexo对Windows图片不友好的问题]]></title>
    <url>%2F2019%2F04%2F11%2F%E7%BB%88%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%AF%B9Windows%E5%9B%BE%E7%89%87%E4%B8%8D%E5%8F%8B%E5%A5%BD%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题 : hexo的next主题, 在Windows系统下, 使用Typora编辑文字, 发现Typora引用的图片无法在网站上显示, 网页默认路径是文章路径. 如果我想让网站显示图片, 只能用Typora引用在文章路径下的图片. 这样就导致了两问题 : 1. 编写文章及其麻烦 2. 图片直接放在路径下及其杂乱 1. 方案一 :利用图床, 图床分有免费网站和七牛云, 免费网站图片容易失去, 舍之. 七牛云需要绑定备案域名(免费送的只能给30天). 还有一个方案是用新浪图床小软件, 但是对于图片难以管理, 而且需要稳定的网络, 目前需要离线编辑文章 2. 方案二 :第一步 : 安装插件 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在你的hexo目录下执行这样一句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件 等待一小段时间后, 看到+ hexo-asset-image@0.0.3 则安装好了 第二步 : 设置Typora 打开file -&gt; 偏好设置 -&gt; 图片插入 选择自定义./${filename} 然后勾选优先使用相对路径 遇到的问题有 : Typora 打开图表显示不出, 解决方案是不能下载X64版本的软件, 即便你的电脑是X64位的, 感觉Typora软件优化有问题 安装软件打不开, 显示主程序JavaScript异常 : 去C:\Users\XXXX\AppData\Roaming\ 把Typora相关名字的东西都删除 软件不能是0.9.4 版本, 因为版本过低, 没有自定义路径功能]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建+next主题优化+插件配置+常用操作+错误分析]]></title>
    <url>%2F2019%2F04%2F10%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2Bnext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2B%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%2B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2B%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前言 hexo 优点是轻量化, 对于喜欢用Markdown编辑的用户很容易入手. 主题好看, 使用简单 缺点: 图片上传Markdown很麻烦, 目前较好的方式是图床解决 一. 博客基本框架搭建1. 准备环境 Node.js 下载, 并安装. 详细步骤 : Git下载, 并安装. 详细步骤 : 安装Hexo, 在任意位置右键-&gt;Git Bash运行以下命令即可: 1npm install -g hexo-cli 初始化Hexo, 继续在命令行操作 为初始化文件的路径, 即站点目录 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 启动服务器. 继续在命令行(站点目录路径), 运行 1hexo server //hexo s 也可以 浏览器访问网站 : http://localhost:4000/ 注: hexo 相关命令均在站点目录下, 用Git Bash运行 站点配置文件 : 站点目录下的_config.yml. 每次修改,需要重启服务器 路径为&lt;folder&gt;\_config.yml 主题配置文件 : 主题文件夹下的_config.yml. 修改, 实时看到效果, 无需重启 路径为&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml 2. 实施方案3. 主题优化3.1 添加背景图新建 站点目录\source\images 路径, 存放bg.jpg做背景图 在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 1234567body&#123; background:url(/images/bg.jpg); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125; 3.2 修改Logo字体在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 12345678@font-face &#123; font-family: Zitiming; src: url('/fonts/Zitiming.ttf');&#125;.site-title &#123; font-size: 40px !important; font-family: 'Zitiming' !important;&#125; 其中字体文件在 themes/next/source/fonts 目录下，里面有个 .gitkeep 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 Zitiming.ttf ，具体字库自己从网上下载即可。 3.3 修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量： 12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px 3.4 网站标题栏背景颜色打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 123.site-meta &#123; background: $blue; //修改为自己喜欢的颜色&#125; 3.5 自定义鼠标样式打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 1234567// 鼠标样式 * &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important &#125; :active &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important &#125; 3.6 文章加密访问打开 themes/*/layout/_partials/head.swig文件,在 之前插入代码： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 写文章时加上password: *： 12345---title: 2018date: 2018-10-25 16:10:03password: 123456--- 3.7 实现点击出现桃心效果 在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中。代码如下： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在\themes\*\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 3.8 静态资源压缩在站点目录下： 1$ npm install gulp -g 安装gulp插件： 12345npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save 在 Hexo 站点下新建 gulpfile.js文件，文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');// 压缩css文件gulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩html文件gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public/demo 目录内图片gulp.task('minify-images', function() &#123; gulp.src('./public/demo/**/*.*') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('./public/uploads'));&#125;);// 默认任务gulp.task('default', [ 'minify-html','minify-css','minify-js','minify-images']); 只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器： 123hexo ggulphexo d 3.9 博文置顶 安装插件12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top即可： 12345---title: 2018date: 2018-10-25 16:10:03top: 10--- 设置置顶标志 打开 : /themes/*/layout/_macro/post.swig，定位到 插入以下代码即可： 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; 3.10 在右上角或者左上角实现fork me on github 选择样式GitHub Ribbons, 修改图片跳转链接,将&lt;a href=&quot;https://github.com/you&quot;&gt;中的链接换为自己Github链接： 打开 themes/next/layout/_layout.swig 文件，把代码复制到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面。 3.11 主页文章添加边框阴影效果打开 themes/*/source/css/_custom/custom.styl ,向里面加代码: 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 3.12 显示当前浏览进度修改themes/*/_config.yml，把 false 改为 true： 12345# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true 3.13 创建分类页在终端窗口下，定位到 Hexo 站点目录下输入： 12cd &lt;站点目录&gt;hexo new page categories 3.14 加入 广告主要有两种：百度SSP和谷歌Adsense。方法类似： 注册，复制广告代码 部署到网站。 2.1. 新建 theme/*/layout/_custom/google_ad.swig，将 AdSense 上的代码粘贴进去 2.2. 头部。在 theme/*/layout/_custom/head.swig 中也粘贴一份 2.3. 每篇博客。在 theme/*/layout/post.swig 里中在希望看到的地方加上： 1&#123;% include '_custom/google_ad.swig' %&#125; 例如：在 &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt; 中间插入，总代码如下： 123456&#123;% block content %&#125; &lt;div id="posts" class="posts-expand"&gt; &#123;&#123; post_template.render(page) &#125;&#125; &#123;% include '_custom/google_ad.swig' %&#125; &lt;/div&gt;&#123;% endblock %&#125; 等待审核通过。如果失败，可再次申请。 3.15 添加萌萌哒 安装插件 1npm install --save hexo-helper-live2d 复制你喜欢的模型名字： Epsilon2.1 Gantzert_Felixander haru miku ni-j nico nietzche nipsilon nito shizuku tsumiki wanko z16 hibiki koharu haruto Unitychan tororo hijiki 5.16 关闭文章目录数字在主题目录\_config.yml, 搜索toc关键字,设置 : number: false 12345678910toc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: false # Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front Matter. max_depth: 6 4. 插件配置以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。 4.1 评论系统 推荐指数 优点 缺点 Valine 4 每天30000条评论，10GB的储存 作者评论无标识 来必力/livere 4 多种账号登录 评论无法导出 畅言 3 美观 必须备案域名 gitment 3 简洁 只能登陆github评论 Disqus 1 需要翻*墙 4.1.1 Valine 获取APP ID 和 APP Key 请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用， 进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了。 填写APP ID 和 APP Key到主题配置文件_config.yml 运行hexo g&amp;&amp;hexo d推送到博客。 4.1.2 来必力/livere 登陆 来必力 获取你的 LiveRe UID。 填写LiveRe UID到主题配置文件_config.yml 4.1.3 畅言 获取APP ID 和 APP Key 请先登录或注册 畅言, 点击“立即免费获取畅言”， 新建站点，点击管理，点击评论插件&gt;评论管理， 点击后台总览，然后就能看到你的APP ID和APP Key了。 填写APP ID 和 APP Key到主题配置文件_config.yml 运行hexo g&amp;&amp;hexo d推送到博客。 4.1.4 gitment 安装插件： npm i –save gitment 申请应用 在New OAuth App为你的博客应用一个密钥: 1234Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址 配置 编辑主题配置文件themes/*/_config.yml: 123456789101112131415# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: &#123;you github user id&#125; github_repo: 公开的git仓库,评论会作为那个项目的issue client_id: &#123;刚才申请的ClientID&#125; client_secret: &#123;刚才申请的Client Secret&#125; proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_pro 4.1.5 Disqus编辑 主题配置文件themes/*/_config.yml， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。 1234disqus: enable: false shortname: count: true 4.2 数据统计与分析 推荐指数 优点 缺点 不蒜子 4 可直接将访问次数显示在您在网页上（也可不显示） 只计数 百度统计 3 收录慢 4.2.1 不蒜子编辑 主题配置文件 themes/*/_config.yml中的busuanzi_count的配置项即可。 当enable: true时，代表开启全局开关。 若site_uv（本站访客数）、site_pv（本站访客数）、page_pv（本文总阅读量）的值均为false时，不蒜子仅作记录而不会在页面上显示。 注意： 1不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！ 解决办法： 找到主题调用不蒜子的swig文件。一般在”\themes*\layout_third-party\analytics\busuanzi-counter.swig” 更改域名 1234把原有的：&lt;script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;域名改一下即可：&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 4.2.2 百度统计 登录 百度统计，定位到站点的代码获取页面 复制统计脚本 id，如图： 编辑 主题配置文件themes/*/_config.yml，修改字段 google_analytics，值设置成你的统计脚本 id。 4.3 内容分享服务 推荐指数 优点 缺点 百度分享 4 稳定 不太美观 need-more-share2 4 美观 更新不及时（比如微信分享API） 4.3.1 百度分享编辑 主题配置文件，添加/修改字段 baidushare，值为 true即可。 12# 百度分享服务baidushare: true 4.3.2 need-more-share2编辑 主题配置文件，添加/修改字段 needmoreshare2，值为 true即可。 12needmoreshare2: enable: true 4.4 搜索服务 推荐指数 优点 缺点 Local Search 4 配置方便 Swiftype 2 需注册 Algolia 2 需注册 4.1 Local Search添加百度/谷歌/本地 自定义站点内容搜索 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true 5. 错误分析如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。 5.1 YAML Parsing Error12JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29: last_updated: Last updated: %s 参数中包含冒号，请用加引号，如Last updated: %s 12JS-YAML: bad indentation of a mapping entry at line 18, column 31: last_updated："Last updated: %s" 字段后面的冒号必须为英文冒号，如：last_updated: 字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s” 5.2 EMFILE Error1Error: EMFILE, too many open files 生成大量的文件时，可能遇到EMFILE错误。 可以运行以下命令来增加允许同步I / O操作的数量。 1$ ulimit -n 10000 5.3 Process Out of Memory当hexo g时，遇到以下错误： 1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory 如下，更改hexo-cli文件的第一行，来增大nodejs堆内存.该bug已在新版本修复。 1#!/usr/bin/env node --max_old_space_size=8192 5.4 Git Deployment Problems RPC failed 123error: RPC failed; result=22, HTTP code = 403fatal: 'username.github.io' does not appear to be a git repository 确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。 Error: ENOENT: no such file or directory 这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。 解决办法： 检查文章的标签和类别,确保本地和github上是相同的。 合并分支（Commit）。 清除，重构。在站点目录下，命令行（即Git Bash）运行hexo clean和hexo g 手动将站点目录下的public文件夹复制到您的桌面 从你的master分支切换到部署在本地分支。 从桌面复制public文件夹到本地分支。 合并分支到github（Commit）。 切回master分支。 5.5 Server Problems1Error: listen EADDRINUSE 你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置： 1$ hexo server -p 5000 5.6 Plugin Installation Problems1npm ERR! node-waf configure build 这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。 5.7 Error with DTrace (Mac OS X)123&#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125; DTrace安装可能有问题，重装: 1$ npm install hexo --no-optional 详见 #1326 5.8 Iterate Data Model on Jade or SwigHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。 12&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125; 5.9 Data Not Updated一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次： 1$ hexo clean 5.10 No command is executed那个不能使用除help、init和version以外的命令行（即Git Bash）时, 有可能时站点目录下的 package.json文件，缺少hexo，如下: 12345&#123; "hexo": &#123; "version": "3.2.2" &#125;&#125; 5.11 Escape ContentsHexo使用Nunjucks渲染的页面. { { } }或{ % % }将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号： 12 Hello 1​ ENOSPC Error (Linux)如果运行命令$ hexo server 返回一个错误:12Error: watch ENOSPC … 可以通过运行$ npm dedupe或者以下命令行（即Git Bash）：12$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 来增加测试时，你可以看见的文件数量。 EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令$ hexo server 返回这个错误:12Error: watch /path/to/hexo/theme/ EMPERM 因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。 所以需要重新编译，再启动服务器：123$ hexo generate$ hexo server -s Template render error有时运行命令$ hexo generate 返回一个错误:123FATAL Something’s wrong. Maybe you can find the solution here: &lt;http://hexo.io/docs/troubleshooting.html&gt;Template render error: (unknown path) 这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件_config.yml中，比如缩进错误： 错误例子：plugins:hexo-generator-feedhexo-generator-sitemap12345### 6. 常用操作#### 6.1 创建文章命令： $ hexo new [layout] 123456789101112参数说明：- [layout]可以为以下三种：| 参数名 | 功能 | 文章路径 || ------ | ----------------------- | -------------- || post | 新建博文 | source/_posts || page | 新建页面（如404，分类） | source || draft | 草稿 | source/_drafts |草稿可通过一下命令发布： $ hexo publish [layout] ` title注意： 不是博文标题， 是博文markdown文件的名字， 也是博文链接的后缀（如https://www.simon96.online/2018/10/12/hexo-tutorial/中的hexo-tutorial） 6.2 文章模版 创建模版 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： $ hexo new blog “simon” 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 blog.md，并根据其内容建立文章。 修改参数 以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 6.3 Front-matter就是博文最上方以 --- 分隔的那部分。 默认可以使用的Front-matter： 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 &lt;!--more--&gt; 主页显示以上文字 截取文章150字]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IO流详解]]></title>
    <url>%2F2019%2F04%2F10%2FIO%E6%B5%81%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一. IO流1. IO流概述 IO : In/Out IO流的作用 : 数据的传输 2. IO流的分类 按流向分类 : 输入和输出 按照操作的数据类型 : 字节和字符 字节 输入 输出 字节 字节输入流(InputStream) 字节输出流(OutputSteam) 字符 字符输入流(Reader) 字符输出流(Write) 3. 学习IO流的注意事项 任何文件的底层最小的存储单元是字节 站在内存的角度思考输入和输出 注意事项 : ​ 使用IO流的时候, 关联的一定是文件, 不能是文件夹 4. IO流图 字节输入流]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
</search>
