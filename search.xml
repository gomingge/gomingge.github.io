<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《图解HTTP》读书笔记_TCP与UDP]]></title>
    <url>%2F2019%2F04%2F12%2F%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_TCP%E4%B8%8EUDP%2F</url>
    <content type="text"><![CDATA[TCP与UDP1.1 传输层的作用TCP -&gt; 面向连接的, 可靠的流协议, 一共可靠的通信传输 UDP -&gt; 面向无连接的, 具有不可靠性的数据包协议(让广播和细节控制交给应用的通信传输) 详解: TCP用于在传输层有必要时效内可靠传输的情况, 由于它是面向连接并具备顺序控制, 重发控制等机制的, 所以它可以为应用提供可靠传输. 而UDP则主要用于哪些对高速传输和实时性比较高要求的通信或广播通信 因此，TCP和UDP应该根据应用目的按需使用。另外，在日常使用TCP或UDP时，通常会用到操作系统提供的类库，这种类库一般被称为API，对于TCP或UDP来说会广泛使用到套接字（Socket）的API。应用程序使用套接字时，可以设置对端的IP地址、端口号，并实现数据的发送与接收。 1.2 端口号MAC地址 : 识别链路中不同计算机 IP地址 : 识别TCP/IP网络中互联的主机和路由器 端口号: 传输层, 识别同一台计算机中进行通信的不同应用程序 一般知名端口号在0~1023之间, 而我们经常使用的自定义/动态分配的端口号则一般在49152~65535之间. 1.3 UDP​ UDP(User Datagram Protocol)不提供复杂的控制机制, 利用IP提供面向无连接的通信服务, 因此它不会负责: 流量控制, 对包重发等. UDP应用于 包量较少的通信(DNS, SNMP等) 视频, 音频等多媒体通信(即时通信) 限定于LAN等特定网络中的应用通信 广播通信(广播, 多播) 1.4 TCP1.4,1 概述​ TCP作为一种面向有连接的协议, 只有在确认通信段存在时, 才会发送数据, 从而可以控制流量的浪费 ​ 为了通过IP数据包实现可靠性传输, 需要考虑很多事情, 例如: 数据的破坏, 丢包, 重复以及分辨顺序混乱等问题 ​ TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。 使用TCP的一个连接的建立与断开，正常过程下至少需要来回发送7个包才能完成，也就是我们常常听到的三次握手，两次挥手。 1.4.2 面试题问题 为什么要三次握手? ​ 三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是 双方确认自己与对方的发送与接收是正常的。第一次握手：Client 什么都不能确认；Server 确认了对方发送正常 第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发 送正常第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常， 对方发送接收正常所以三次握手就能确认双发收发功能都正常，缺一不可。 为什么要传回 SYN 接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。 SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先 发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表 示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据 才可以在客户机和服务器之间传递。 传了 SYN,为啥还要传 ACK 双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送 方的通道还需要 ACK 信号来进行验证。 断开一个 TCP 连接则需要“四次挥手”： 客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送 服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号 服务器-关闭与客户端的连接，发送一个FIN给客户端 客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1 为什么要四次挥手 任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送 的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。 举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的 话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，后 B 说“我说完了”，A 回答“知道 了”，这样通话才算结束。]]></content>
      <categories>
        <category>计算机网络基础</category>
      </categories>
      <tags>
        <tag>网络相关</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《图解HTTP》读书笔记_IP协议及其相关技术]]></title>
    <url>%2F2019%2F04%2F12%2F%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_IP%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[IP协议及相关技术1.1 IP的主要作用 IP的主要作用就是在复杂的网络环境中将数据包发送给最终的目标地址 1.2 IP的三个作用模块1.2.1 IP寻址​ 在计算机通信中, 为了识别通信段, 必须要有一个类似于地址的识别码进行标识. 而在数据链路层, 使用MAC地址来表示同一个链路中不同计算机的一种识别码. 在网络层叫IP地址. 一张网卡对应一个MAC地址 1.2.2 路由路由控制(Routing) : 是指将分组数据发送到最终目标地址的功能, 即使网络非常复杂, 也可以通过路由控制确定到达目标地址的通路. Hop中文叫“跳”, 它是指网络中的一个区间, IP包正是在网络中一个跳间被转发. 数据链路实现某一个区间(一跳)内的通信，而IP实现直至最终目标地址的通信(点对点) 为了将数据包发送给目标主机，所有主机都维护者一张路由控制表（Routing Table），该表记录IP数据在下一步应该发给哪一个路由器。IP包将根据这个路由表在各个数据链路上传输。 1.3 IP分包和组包​ IP面向无连接，即在发包之前，不需要建立与对端目标地址之间的连接。上层如果遇到需要发送给IP的数据，该数据会被立即压缩成IP包发送出去。 TIP: IP为什么面向无连接： 1.简化：面向连接比起面向无连接处理相对复杂！ 2.提速：每次通信之前都需要建立连接，会降低处理速度！ 需要有连接时，可以委托上一层（传输层）提供此项服务，因此，IP为了实现简单化与高速化采用面向无连接方式。 1.3 相关技术 DNS 2. ARP 3. ICMP 4. DHCP 5. NAT 6. IP 隧道 1.3.1 DNS​ 有效管理主机名和IP地址之间的对应关系-&gt;DNS系统，那么DNS查询的机制如下 1.3.2 ARP​ ARP是一种解决地址问题的协议, 以目标地址为线索, 用来定位下一个应该接收数据分包的网络设备对应的MAC地址, 不过ARP只适用于IPv4, 不适用与IPv6. RARP则是将ARP反过来，从MAC地址定位IP地址的一种协议。 1.3.3 ICMP​ 一个刚刚搭建好的网络, 需要验证该网络的设置是否正确. ICMP(Internet Control Message Protocol)这是提供这类功能的一种协议, 其主要功能包括 : 确认IP包是否成功送达目标地址，通知在发送过程中IP包被废弃的具体原因等等. 例如我们经常使用ping命令, 就是一个典型的ICMP的具体应用. 1.3.4 DHCP​ 如果逐一地为每一台主机设置IP地址会非常繁琐，于是为了实现自动设置IP地址、统一管理IP地址分配，就产生了DHCP（Dynamic Host Configuration Protocol）协议。有了DHCP，计算机只要连接到网络，就可以进行TCP/IP通信。 1.3.5 NAT​ NAT（Network Address Translator）用于在本地网络中使用私有地址，在连接互联网时转而使用全局IP地址的技术。 1.3.6 IP隧道​ 在一个网络环境中, 假如网络A, B使用IPv6, 中间位置的网络C支持使用IPv4的话, 网络A与网络B之间无法直接进行通信. 为了让他们之间正常通信, 这时需要采用IP隧道的功能。 ​ IP隧道中可以将那些从网络A发过来的IPv6的包统和为一个数据, 再为之追加一个IPv4的首部以后转发给网络C, 这种在网络层的首部后面继续追加网络层首部的通信方法就叫做“IP隧道”]]></content>
      <categories>
        <category>计算机网络基础</category>
      </categories>
      <tags>
        <tag>网络相关</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《图解HTTP》读书笔记_TCP_IP协议]]></title>
    <url>%2F2019%2F04%2F12%2F%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_TCP_IP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[TCP/IP基础知识1.1 TCP/IP的背景及历史 TCP(Transmission Control Protocol)和IP(Internet Protocol)是互联网的众多通信协议中最为著名的。 1.2 TCP/IP 标准化1.2.1. 具体含义 很多人都会认为TCP/IP是指TCP与IP两种协议，实际生活中有时也确实就是指这两种协议。然后，很多情况下，它只是利用IP进行通信时所必须使用到的协议群的统称。 1.2.2 标准化 由于TCP/IP尽早地制定了可行性较强的协议，提出了应对技术快速革新的协议，并及时进行后期改良的方案，因此打败了OSI模型，成为了事实上的标准 1.3 TCP/IP 协议分层 上图列出了TCP/IP与OSI分层之间的大概关系, 不难看出, TCP/IP与OSI在分层模块上骚又区别. OSI参考模型注重”通信协议必要的功能是什么”, 而TCP/IP则更强调”在计算机上实现协议应该开发那种程序”. 现在再来看看主机A向主机B发送一封电子邮件，在TCP/IP模型下的处理过程： 分组数据包经过以太网的数据链路时, 大致流程如下]]></content>
      <categories>
        <category>计算机网络基础</category>
      </categories>
      <tags>
        <tag>网络相关</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《图解HTTP读书》笔记_网络基础知识]]></title>
    <url>%2F2019%2F04%2F12%2F%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[这是一本图文并茂的网络管理技术书籍，旨在让广大读者理解TCP/IP的基本知识、掌握TCP/IP的基本技能。 书中讲解了网络基础知识、TCP/IP基础知识、数据链路、IP协议、IP协议相关技术、TCP与UDP、路由协议、应用协议、网络安全等内容，引导读者了解和掌握TCP/IP，营造一个安全的、使用放心的网络环境。 网络基础知识1.1 计算机使用模式的演变 1.2 协议 协议 : 就是计算机与计算机之间通过网络实现通信, 实现达成的一种”约定. 这种约定使那些由不同厂商的设备, 不同的CPU以及不同的操作系统组成的计算机之间, 只要遵循相同的协议就能够实现通信, 反之亦然 1.3 协议分层与OSI参考模型协议分层如同计算机软件中的模块化开发, OSI参考模型的建议是比较理想化的 OSI每层的作用 通信流程 : 假设主机A的用户A要给主机B的用户B发送一封电子邮件： 发送方从第7层、第6层到第1层由上至下按照顺序传输数据，而接收端则从第1层、第2层到第7层由下至上向每个上一级分层传输数据。每个分层上，在处理由上一层传过来的数据时可以附上当前分层的协议所必须的“首部”信息。然后接收端对收到的数据进行数据“首部”与“内容”的分离，再转发给上一分层，并最终将发送端的数据恢复为原装。 记忆 : 基础 -&gt; 数据打包 -&gt; 选择地方 -&gt; 保证传输安全 -&gt; 控制开关 -&gt; 转码 -&gt; 协议通道 层级 概述 描述 物理层 信号和介质 数据传输和相关设备 数据链路层 帧和介质访问控制 数据组合成数据块(帧), 以及控制传输速率 网络层 路径选择, 路由及逻辑寻址 寻址和路由选择,连接的建立,保持和终止 传输层 流量, 控制和可靠性 保证数据传输可靠,有流量控.分/重组和差错控制 会话层 对话和交谈 建立和维持会话,使会话同步 表示层 一种通用数据格式 数据修饰,包括转码, 加密,压缩 应用层 协议层 DNS, HTTP协议等]]></content>
      <categories>
        <category>计算机网络基础</category>
      </categories>
      <tags>
        <tag>网络相关</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于解决hexo对Windows图片不友好的问题]]></title>
    <url>%2F2019%2F04%2F11%2F%E7%BB%88%E4%BA%8E%E8%A7%A3%E5%86%B3hexo%E5%AF%B9Windows%E5%9B%BE%E7%89%87%E4%B8%8D%E5%8F%8B%E5%A5%BD%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题 : hexo的next主题, 在Windows系统下, 使用Typora编辑文字, 发现Typora引用的图片无法在网站上显示, 网页默认路径是文章路径. 如果我想让网站显示图片, 只能用Typora引用在文章路径下的图片. 这样就导致了两问题 : 1. 编写文章及其麻烦 2. 图片直接放在路径下及其杂乱 1. 方案一 :利用图床, 图床分有免费网站和七牛云, 免费网站图片容易失去, 舍之. 七牛云需要绑定备案域名(免费送的只能给30天). 还有一个方案是用新浪图床小软件, 但是对于图片难以管理, 而且需要稳定的网络, 目前需要离线编辑文章 2. 方案二 :第一步 : 安装插件 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在你的hexo目录下执行这样一句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件 等待一小段时间后, 看到+ hexo-asset-image@0.0.3 则安装好了 第二步 : 设置Typora 打开file -&gt; 偏好设置 -&gt; 图片插入 选择自定义./${filename} 然后勾选优先使用相对路径 遇到的问题有 : Typora 打开图表显示不出, 解决方案是不能下载X64版本的软件, 即便你的电脑是X64位的, 感觉Typora软件优化有问题 安装软件打不开, 显示主程序JavaScript异常 : 去C:\Users\XXXX\AppData\Roaming\ 把Typora相关名字的东西都删除 软件不能是0.9.4 版本, 因为版本过低, 没有自定义路径功能]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建+next主题优化+插件配置+常用操作+错误分析]]></title>
    <url>%2F2019%2F04%2F10%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2Bnext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2B%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%2B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2B%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前言 hexo 优点是轻量化, 对于喜欢用Markdown编辑的用户很容易入手. 主题好看, 使用简单 缺点: 图片上传Markdown很麻烦, 目前较好的方式是图床解决 一. 博客基本框架搭建1. 准备环境 Node.js 下载, 并安装. 详细步骤 : Git下载, 并安装. 详细步骤 : 安装Hexo, 在任意位置右键-&gt;Git Bash运行以下命令即可: 1npm install -g hexo-cli 初始化Hexo, 继续在命令行操作 为初始化文件的路径, 即站点目录 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 启动服务器. 继续在命令行(站点目录路径), 运行 1hexo server //hexo s 也可以 浏览器访问网站 : http://localhost:4000/ 注: hexo 相关命令均在站点目录下, 用Git Bash运行 站点配置文件 : 站点目录下的_config.yml. 每次修改,需要重启服务器 路径为&lt;folder&gt;\_config.yml 主题配置文件 : 主题文件夹下的_config.yml. 修改, 实时看到效果, 无需重启 路径为&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml 2. 实施方案3. 主题优化3.1 添加背景图新建 站点目录\source\images 路径, 存放bg.jpg做背景图 在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 1234567body&#123; background:url(/images/bg.jpg); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125; 3.2 修改Logo字体在 themes/*/source/css/_custom/custom.styl 中添加如下代码： 12345678@font-face &#123; font-family: Zitiming; src: url('/fonts/Zitiming.ttf');&#125;.site-title &#123; font-size: 40px !important; font-family: 'Zitiming' !important;&#125; 其中字体文件在 themes/next/source/fonts 目录下，里面有个 .gitkeep 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 Zitiming.ttf ，具体字库自己从网上下载即可。 3.3 修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量： 12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px 3.4 网站标题栏背景颜色打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 123.site-meta &#123; background: $blue; //修改为自己喜欢的颜色&#125; 3.5 自定义鼠标样式打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码： 1234567// 鼠标样式 * &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important &#125; :active &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important &#125; 3.6 文章加密访问打开 themes/*/layout/_partials/head.swig文件,在 之前插入代码： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 写文章时加上password: *： 12345---title: 2018date: 2018-10-25 16:10:03password: 123456--- 3.7 实现点击出现桃心效果 在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中。代码如下： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在\themes\*\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 3.8 静态资源压缩在站点目录下： 1$ npm install gulp -g 安装gulp插件： 12345npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save 在 Hexo 站点下新建 gulpfile.js文件，文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');// 压缩css文件gulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩html文件gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public/demo 目录内图片gulp.task('minify-images', function() &#123; gulp.src('./public/demo/**/*.*') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('./public/uploads'));&#125;);// 默认任务gulp.task('default', [ 'minify-html','minify-css','minify-js','minify-images']); 只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器： 123hexo ggulphexo d 3.9 博文置顶 安装插件12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top即可： 12345---title: 2018date: 2018-10-25 16:10:03top: 10--- 设置置顶标志 打开 : /themes/*/layout/_macro/post.swig，定位到 插入以下代码即可： 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; 3.10 在右上角或者左上角实现fork me on github 选择样式GitHub Ribbons, 修改图片跳转链接,将&lt;a href=&quot;https://github.com/you&quot;&gt;中的链接换为自己Github链接： 打开 themes/next/layout/_layout.swig 文件，把代码复制到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面。 3.11 主页文章添加边框阴影效果打开 themes/*/source/css/_custom/custom.styl ,向里面加代码: 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 3.12 显示当前浏览进度修改themes/*/_config.yml，把 false 改为 true： 12345# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true 3.13 创建分类页在终端窗口下，定位到 Hexo 站点目录下输入： 12cd &lt;站点目录&gt;hexo new page categories 3.14 加入 广告主要有两种：百度SSP和谷歌Adsense。方法类似： 注册，复制广告代码 部署到网站。 2.1. 新建 theme/*/layout/_custom/google_ad.swig，将 AdSense 上的代码粘贴进去 2.2. 头部。在 theme/*/layout/_custom/head.swig 中也粘贴一份 2.3. 每篇博客。在 theme/*/layout/post.swig 里中在希望看到的地方加上： 1&#123;% include '_custom/google_ad.swig' %&#125; 例如：在 &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt; 中间插入，总代码如下： 123456&#123;% block content %&#125; &lt;div id="posts" class="posts-expand"&gt; &#123;&#123; post_template.render(page) &#125;&#125; &#123;% include '_custom/google_ad.swig' %&#125; &lt;/div&gt;&#123;% endblock %&#125; 等待审核通过。如果失败，可再次申请。 3.15 添加萌萌哒 安装插件 1npm install --save hexo-helper-live2d 复制你喜欢的模型名字： Epsilon2.1 Gantzert_Felixander haru miku ni-j nico nietzche nipsilon nito shizuku tsumiki wanko z16 hibiki koharu haruto Unitychan tororo hijiki 5.16 关闭文章目录数字在主题目录\_config.yml, 搜索toc关键字,设置 : number: false 12345678910toc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: false # Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front Matter. max_depth: 6 4. 插件配置以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。 4.1 评论系统 推荐指数 优点 缺点 Valine 4 每天30000条评论，10GB的储存 作者评论无标识 来必力/livere 4 多种账号登录 评论无法导出 畅言 3 美观 必须备案域名 gitment 3 简洁 只能登陆github评论 Disqus 1 需要翻*墙 4.1.1 Valine 获取APP ID 和 APP Key 请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用， 进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了。 填写APP ID 和 APP Key到主题配置文件_config.yml 运行hexo g&amp;&amp;hexo d推送到博客。 4.1.2 来必力/livere 登陆 来必力 获取你的 LiveRe UID。 填写LiveRe UID到主题配置文件_config.yml 4.1.3 畅言 获取APP ID 和 APP Key 请先登录或注册 畅言, 点击“立即免费获取畅言”， 新建站点，点击管理，点击评论插件&gt;评论管理， 点击后台总览，然后就能看到你的APP ID和APP Key了。 填写APP ID 和 APP Key到主题配置文件_config.yml 运行hexo g&amp;&amp;hexo d推送到博客。 4.1.4 gitment 安装插件： npm i –save gitment 申请应用 在New OAuth App为你的博客应用一个密钥: 1234Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址 配置 编辑主题配置文件themes/*/_config.yml: 123456789101112131415# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: &#123;you github user id&#125; github_repo: 公开的git仓库,评论会作为那个项目的issue client_id: &#123;刚才申请的ClientID&#125; client_secret: &#123;刚才申请的Client Secret&#125; proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_pro 4.1.5 Disqus编辑 主题配置文件themes/*/_config.yml， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。 1234disqus: enable: false shortname: count: true 4.2 数据统计与分析 推荐指数 优点 缺点 不蒜子 4 可直接将访问次数显示在您在网页上（也可不显示） 只计数 百度统计 3 收录慢 4.2.1 不蒜子编辑 主题配置文件 themes/*/_config.yml中的busuanzi_count的配置项即可。 当enable: true时，代表开启全局开关。 若site_uv（本站访客数）、site_pv（本站访客数）、page_pv（本文总阅读量）的值均为false时，不蒜子仅作记录而不会在页面上显示。 注意： 1不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！ 解决办法： 找到主题调用不蒜子的swig文件。一般在”\themes*\layout_third-party\analytics\busuanzi-counter.swig” 更改域名 1234把原有的：&lt;script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;域名改一下即可：&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 4.2.2 百度统计 登录 百度统计，定位到站点的代码获取页面 复制统计脚本 id，如图： 编辑 主题配置文件themes/*/_config.yml，修改字段 google_analytics，值设置成你的统计脚本 id。 4.3 内容分享服务 推荐指数 优点 缺点 百度分享 4 稳定 不太美观 need-more-share2 4 美观 更新不及时（比如微信分享API） 4.3.1 百度分享编辑 主题配置文件，添加/修改字段 baidushare，值为 true即可。 12# 百度分享服务baidushare: true 4.3.2 need-more-share2编辑 主题配置文件，添加/修改字段 needmoreshare2，值为 true即可。 12needmoreshare2: enable: true 4.4 搜索服务 推荐指数 优点 缺点 Local Search 4 配置方便 Swiftype 2 需注册 Algolia 2 需注册 4.1 Local Search添加百度/谷歌/本地 自定义站点内容搜索 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true 5. 错误分析如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。 5.1 YAML Parsing Error12JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29: last_updated: Last updated: %s 参数中包含冒号，请用加引号，如Last updated: %s 12JS-YAML: bad indentation of a mapping entry at line 18, column 31: last_updated："Last updated: %s" 字段后面的冒号必须为英文冒号，如：last_updated: 字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s” 5.2 EMFILE Error1Error: EMFILE, too many open files 生成大量的文件时，可能遇到EMFILE错误。 可以运行以下命令来增加允许同步I / O操作的数量。 1$ ulimit -n 10000 5.3 Process Out of Memory当hexo g时，遇到以下错误： 1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory 如下，更改hexo-cli文件的第一行，来增大nodejs堆内存.该bug已在新版本修复。 1#!/usr/bin/env node --max_old_space_size=8192 5.4 Git Deployment Problems RPC failed 123error: RPC failed; result=22, HTTP code = 403fatal: 'username.github.io' does not appear to be a git repository 确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。 Error: ENOENT: no such file or directory 这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。 解决办法： 检查文章的标签和类别,确保本地和github上是相同的。 合并分支（Commit）。 清除，重构。在站点目录下，命令行（即Git Bash）运行hexo clean和hexo g 手动将站点目录下的public文件夹复制到您的桌面 从你的master分支切换到部署在本地分支。 从桌面复制public文件夹到本地分支。 合并分支到github（Commit）。 切回master分支。 5.5 Server Problems1Error: listen EADDRINUSE 你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置： 1$ hexo server -p 5000 5.6 Plugin Installation Problems1npm ERR! node-waf configure build 这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。 5.7 Error with DTrace (Mac OS X)123&#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125; DTrace安装可能有问题，重装: 1$ npm install hexo --no-optional 详见 #1326 5.8 Iterate Data Model on Jade or SwigHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。 12&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125; 5.9 Data Not Updated一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次： 1$ hexo clean 5.10 No command is executed那个不能使用除help、init和version以外的命令行（即Git Bash）时, 有可能时站点目录下的 package.json文件，缺少hexo，如下: 12345&#123; "hexo": &#123; "version": "3.2.2" &#125;&#125; 5.11 Escape ContentsHexo使用Nunjucks渲染的页面. { { } }或{ % % }将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号： 12 Hello 1​ ENOSPC Error (Linux)如果运行命令$ hexo server 返回一个错误:12Error: watch ENOSPC … 可以通过运行$ npm dedupe或者以下命令行（即Git Bash）：12$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 来增加测试时，你可以看见的文件数量。 EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令$ hexo server 返回这个错误:12Error: watch /path/to/hexo/theme/ EMPERM 因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。 所以需要重新编译，再启动服务器：123$ hexo generate$ hexo server -s Template render error有时运行命令$ hexo generate 返回一个错误:123FATAL Something’s wrong. Maybe you can find the solution here: &lt;http://hexo.io/docs/troubleshooting.html&gt;Template render error: (unknown path) 这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件_config.yml中，比如缩进错误： 错误例子：plugins:hexo-generator-feedhexo-generator-sitemap12345678910#### 5.12 Please make sure you have the correct access rights and the repository exists.问题原因 : 无法连接到 github服务器1. 首先我得重新在git设置一下身份的名字和邮箱(进入到需要提交的文件夹底下（因为直接打开git Bash，在没有路径的情况下，无法修改）```shellgit config --global user.name "yourname"git config --global user.email“your@email.com" 注：yourname是你要设置的名字，your@email是你要设置的邮箱。 删除.ssh文件夹（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git） git输入命令 1ssh-keygen -t rsa -C "your@email.com"（请填你设置的邮箱地址） 接着出现：Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa): 请直接按下回车 回车 yes 回车 回车~ 然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub, 将全部的内容复制 打开https://github.com/，登陆你的账户，进入设置 进入ssh设置 在key中将刚刚复制的粘贴进去 点击add ssh key， ok！ 在git中输入命令： 1ssh -T git@github.com 然后会跳出一堆话。。 输入命令：yes 注意: 操作这里的前提是根目录下的_config.yml修改成 12345deploy: #博客部署 type: git repo: https://github.com/Github账号名称/Github账号名称.github.io.git #coding: https://git.coding.net/码云账号名称/码云账号名称.git branch: master 而且仓库名必须为&lt;Github账号名称&gt;.github.io GitHub不允许自定义,免得不解析的 6. 常用操作6.1 创建文章命令： 1$ hexo new [layout] &lt;title&gt; 参数说明： [layout]可以为以下三种： 参数名 功能 文章路径 post 新建博文 source/_posts page 新建页面（如404，分类） source draft 草稿 source/_drafts 草稿可通过一下命令发布： 1$ hexo publish [layout] &lt;title&gt; title注意： 不是博文标题， 是博文markdown文件的名字， 也是博文链接的后缀（如https://www.simon96.online/2018/10/12/hexo-tutorial/中的hexo-tutorial） 6.2 文章模版 创建模版 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： $ hexo new blog “simon” 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 blog.md，并根据其内容建立文章。 修改参数 以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 6.3 Front-matter就是博文最上方以 --- 分隔的那部分。 默认可以使用的Front-matter： 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 &lt;!--more--&gt; 主页显示以上文字 截取文章150字]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IO流详解]]></title>
    <url>%2F2019%2F04%2F10%2FIO%E6%B5%81%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一. IO流1. IO流概述 IO : In/Out IO流的作用 : 数据的传输 2. IO流的分类 按流向分类 : 输入和输出 按照操作的数据类型 : 字节和字符 字节 输入 输出 字节 字节输入流(InputStream) 字节输出流(OutputSteam) 字符 字符输入流(Reader) 字符输出流(Write) 3. 学习IO流的注意事项 任何文件的底层最小的存储单元是字节 站在内存的角度思考输入和输出 注意事项 : ​ 使用IO流的时候, 关联的一定是文件, 不能是文件夹 4. IO流图 字节输入流]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
</search>
